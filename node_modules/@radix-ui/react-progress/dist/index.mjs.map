{"mappings":"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","sources":["packages/react/progress/src/index.ts","packages/react/progress/src/Progress.tsx"],"sourcesContent":["export {\n  createProgressScope,\n  //\n  Progress,\n  ProgressIndicator,\n  //\n  Root,\n  Indicator,\n} from './Progress';\nexport type { ProgressProps, ProgressIndicatorProps } from './Progress';\n","import * as React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Progress\n * -----------------------------------------------------------------------------------------------*/\n\nconst PROGRESS_NAME = 'Progress';\nconst DEFAULT_MAX = 100;\n\ntype ScopedProps<P> = P & { __scopeProgress?: Scope };\nconst [createProgressContext, createProgressScope] = createContextScope(PROGRESS_NAME);\n\ntype ProgressState = 'indeterminate' | 'complete' | 'loading';\ntype ProgressContextValue = { value: number | null; max: number };\nconst [ProgressProvider, useProgressContext] =\n  createProgressContext<ProgressContextValue>(PROGRESS_NAME);\n\ntype ProgressElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ProgressProps extends PrimitiveDivProps {\n  value?: number | null | undefined;\n  max?: number;\n  getValueLabel?(value: number, max: number): string;\n}\n\nconst Progress = React.forwardRef<ProgressElement, ProgressProps>(\n  (props: ScopedProps<ProgressProps>, forwardedRef) => {\n    const {\n      __scopeProgress,\n      value: valueProp,\n      max: maxProp,\n      getValueLabel = defaultGetValueLabel,\n      ...progressProps\n    } = props;\n\n    const max = isValidMaxNumber(maxProp) ? maxProp : DEFAULT_MAX;\n    const value = isValidValueNumber(valueProp, max) ? valueProp : null;\n    const valueLabel = isNumber(value) ? getValueLabel(value, max) : undefined;\n\n    return (\n      <ProgressProvider scope={__scopeProgress} value={value} max={max}>\n        <Primitive.div\n          aria-valuemax={max}\n          aria-valuemin={0}\n          aria-valuenow={isNumber(value) ? value : undefined}\n          aria-valuetext={valueLabel}\n          role=\"progressbar\"\n          data-state={getProgressState(value, max)}\n          data-value={value ?? undefined}\n          data-max={max}\n          {...progressProps}\n          ref={forwardedRef}\n        />\n      </ProgressProvider>\n    );\n  }\n);\n\nProgress.displayName = PROGRESS_NAME;\n\nProgress.propTypes = {\n  max(props, propName, componentName) {\n    const propValue = props[propName];\n    const strVal = String(propValue);\n    if (propValue && !isValidMaxNumber(propValue)) {\n      return new Error(getInvalidMaxError(strVal, componentName));\n    }\n    return null;\n  },\n  value(props, propName, componentName) {\n    const valueProp = props[propName];\n    const strVal = String(valueProp);\n    const max = isValidMaxNumber(props.max) ? props.max : DEFAULT_MAX;\n    if (valueProp != null && !isValidValueNumber(valueProp, max)) {\n      return new Error(getInvalidValueError(strVal, componentName));\n    }\n    return null;\n  },\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProgressIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'ProgressIndicator';\n\ntype ProgressIndicatorElement = React.ElementRef<typeof Primitive.div>;\ninterface ProgressIndicatorProps extends PrimitiveDivProps {}\n\nconst ProgressIndicator = React.forwardRef<ProgressIndicatorElement, ProgressIndicatorProps>(\n  (props: ScopedProps<ProgressIndicatorProps>, forwardedRef) => {\n    const { __scopeProgress, ...indicatorProps } = props;\n    const context = useProgressContext(INDICATOR_NAME, __scopeProgress);\n    return (\n      <Primitive.div\n        data-state={getProgressState(context.value, context.max)}\n        data-value={context.value ?? undefined}\n        data-max={context.max}\n        {...indicatorProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nProgressIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nfunction defaultGetValueLabel(value: number, max: number) {\n  return `${Math.round((value / max) * 100)}%`;\n}\n\nfunction getProgressState(value: number | undefined | null, maxValue: number): ProgressState {\n  return value == null ? 'indeterminate' : value === maxValue ? 'complete' : 'loading';\n}\n\nfunction isNumber(value: any): value is number {\n  return typeof value === 'number';\n}\n\nfunction isValidMaxNumber(max: any): max is number {\n  // prettier-ignore\n  return (\n    isNumber(max) &&\n    !isNaN(max) &&\n    max > 0\n  );\n}\n\nfunction isValidValueNumber(value: any, max: number): value is number {\n  // prettier-ignore\n  return (\n    isNumber(value) &&\n    !isNaN(value) &&\n    value <= max &&\n    value >= 0\n  );\n}\n\n// Split this out for clearer readability of the error message.\nfunction getInvalidMaxError(propValue: string, componentName: string) {\n  return `Invalid prop \\`max\\` of value \\`${propValue}\\` supplied to \\`${componentName}\\`. Only numbers greater than 0 are valid max values. Defaulting to \\`${DEFAULT_MAX}\\`.`;\n}\n\nfunction getInvalidValueError(propValue: string, componentName: string) {\n  return `Invalid prop \\`value\\` of value \\`${propValue}\\` supplied to \\`${componentName}\\`. The \\`value\\` prop must be:\n  - a positive number\n  - less than the value passed to \\`max\\` (or ${DEFAULT_MAX} if no \\`max\\` prop is set)\n  - \\`null\\` if the progress is indeterminate.\n\nDefaulting to \\`null\\`.`;\n}\n\nconst Root = Progress;\nconst Indicator = ProgressIndicator;\n\nexport {\n  createProgressScope,\n  //\n  Progress,\n  ProgressIndicator,\n  //\n  Root,\n  Indicator,\n};\nexport type { ProgressProps, ProgressIndicatorProps };\n"],"names":["createProgressScope","Progress","ProgressIndicator","Root","Indicator","React","createContextScope","Primitive","PROGRESS_NAME","DEFAULT_MAX","createProgressContext","ProgressProvider","useProgressContext","forwardRef","props","forwardedRef","__scopeProgress","value","valueProp","max","maxProp","getValueLabel","defaultGetValueLabel","progressProps","isValidMaxNumber","isValidValueNumber","valueLabel","isNumber","undefined","getProgressState","propTypes","propName","componentName","propValue","strVal","String","Error","getInvalidMaxError","getInvalidValueError","INDICATOR_NAME","indicatorProps","context","Math","round","maxValue","isNaN"],"version":3,"file":"index.mjs.map"}