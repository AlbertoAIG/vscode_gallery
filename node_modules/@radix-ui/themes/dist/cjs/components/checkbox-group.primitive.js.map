{
  "version": 3,
  "sources": ["../../../src/components/checkbox-group.primitive.tsx"],
  "sourcesContent": ["import * as React from 'react';\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox';\nimport { createCheckboxScope } from '@radix-ui/react-checkbox';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useDirection } from '@radix-ui/react-direction';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxGroup\n * -----------------------------------------------------------------------------------------------*/\nconst CHECKBOX_GROUP_NAME = 'CheckboxGroup';\n\ntype ScopedProps<P> = P & { __scopeCheckboxGroup?: Scope };\nconst [createCheckboxGroupContext, createCheckboxGroupScope] = createContextScope(\n  CHECKBOX_GROUP_NAME,\n  [createRovingFocusGroupScope, createCheckboxScope]\n);\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\nconst useCheckboxScope = createCheckboxScope();\n\ntype CheckboxGroupContextValue = {\n  name?: string;\n  required: boolean;\n  disabled: boolean;\n  value?: string[];\n  onItemCheck(value: string): void;\n  onItemUncheck(value: string): void;\n};\n\nconst [CheckboxGroupProvider, useCheckboxGroupContext] =\n  createCheckboxGroupContext<CheckboxGroupContextValue>(CHECKBOX_GROUP_NAME);\n\ntype CheckboxGroupElement = React.ElementRef<typeof Primitive.div>;\ntype RovingFocusGroupProps = Radix.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface CheckboxGroupProps extends PrimitiveDivProps {\n  name?: CheckboxGroupContextValue['name'];\n  required?: Radix.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>['required'];\n  disabled?: Radix.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>['disabled'];\n  dir?: RovingFocusGroupProps['dir'];\n  orientation?: RovingFocusGroupProps['orientation'];\n  loop?: RovingFocusGroupProps['loop'];\n  defaultValue?: string[];\n  value?: CheckboxGroupContextValue['value'];\n  onValueChange?: (value: string[]) => void;\n}\n\nconst CheckboxGroup = React.forwardRef<CheckboxGroupElement, CheckboxGroupProps>(\n  (props: ScopedProps<CheckboxGroupProps>, forwardedRef) => {\n    const {\n      __scopeCheckboxGroup,\n      name,\n      defaultValue,\n      value: valueProp,\n      required = false,\n      disabled = false,\n      orientation,\n      dir,\n      loop = true,\n      onValueChange,\n      ...groupProps\n    } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeCheckboxGroup);\n    const direction = useDirection(dir);\n    const [value = [], setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    });\n\n    const handleItemCheck = React.useCallback(\n      (itemValue: string) => setValue((prevValue = []) => [...prevValue, itemValue]),\n      [setValue]\n    );\n\n    const handleItemUncheck = React.useCallback(\n      (itemValue: string) =>\n        setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),\n      [setValue]\n    );\n\n    return (\n      <CheckboxGroupProvider\n        scope={__scopeCheckboxGroup}\n        name={name}\n        required={required}\n        disabled={disabled}\n        value={value}\n        onItemCheck={handleItemCheck}\n        onItemUncheck={handleItemUncheck}\n      >\n        <RovingFocusGroup.Root\n          asChild\n          {...rovingFocusGroupScope}\n          orientation={orientation}\n          dir={direction}\n          loop={loop}\n        >\n          <Primitive.div\n            role=\"group\"\n            data-disabled={disabled ? '' : undefined}\n            dir={direction}\n            {...groupProps}\n            ref={forwardedRef}\n          />\n        </RovingFocusGroup.Root>\n      </CheckboxGroupProvider>\n    );\n  }\n);\n\nCheckboxGroup.displayName = CHECKBOX_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxGroupItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'CheckboxGroupItem';\n\ntype CheckboxGroupItemElement = React.ElementRef<typeof CheckboxPrimitive.Root>;\ntype CheckboxProps = Radix.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>;\ninterface CheckboxGroupItemProps\n  extends Omit<CheckboxProps, 'checked' | 'defaultChecked' | 'onCheckedChange' | 'name'> {\n  value: string;\n}\n\nconst CheckboxGroupItem = React.forwardRef<CheckboxGroupItemElement, CheckboxGroupItemProps>(\n  (props: ScopedProps<CheckboxGroupItemProps>, forwardedRef) => {\n    const { __scopeCheckboxGroup, disabled, ...itemProps } = props;\n    const context = useCheckboxGroupContext(ITEM_NAME, __scopeCheckboxGroup);\n    const isDisabled = context.disabled || disabled;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeCheckboxGroup);\n    const checkboxScope = useCheckboxScope(__scopeCheckboxGroup);\n    const ref = React.useRef<React.ElementRef<typeof CheckboxPrimitive.Root>>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const checked = context.value?.includes(itemProps.value);\n\n    return (\n      <RovingFocusGroup.Item\n        asChild\n        {...rovingFocusGroupScope}\n        focusable={!isDisabled}\n        active={checked}\n      >\n        <CheckboxPrimitive.Root\n          name={context.name}\n          disabled={isDisabled}\n          required={context.required}\n          checked={checked}\n          {...checkboxScope}\n          {...itemProps}\n          ref={composedRefs}\n          onCheckedChange={(checked) => {\n            if (checked) {\n              context.onItemCheck(props.value);\n            } else {\n              context.onItemUncheck(props.value);\n            }\n          }}\n        />\n      </RovingFocusGroup.Item>\n    );\n  }\n);\n\nCheckboxGroupItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxGroupIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'CheckboxGroupIndicator';\n\ntype CheckboxGroupIndicatorElement = React.ElementRef<typeof CheckboxPrimitive.Indicator>;\ntype CheckboxIndicatorProps = Radix.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Indicator>;\ninterface CheckboxGroupIndicatorProps extends CheckboxIndicatorProps {}\n\nconst CheckboxGroupIndicator = React.forwardRef<\n  CheckboxGroupIndicatorElement,\n  CheckboxGroupIndicatorProps\n>((props: ScopedProps<CheckboxGroupIndicatorProps>, forwardedRef) => {\n  const { __scopeCheckboxGroup, ...indicatorProps } = props;\n  const checkboxScope = useCheckboxScope(__scopeCheckboxGroup);\n  return <CheckboxPrimitive.Indicator {...checkboxScope} {...indicatorProps} ref={forwardedRef} />;\n});\n\nCheckboxGroupIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst Root = CheckboxGroup;\nconst Item = CheckboxGroupItem;\nconst Indicator = CheckboxGroupIndicator;\n\nexport {\n  createCheckboxGroupScope,\n  //\n  CheckboxGroup,\n  CheckboxGroupItem,\n  CheckboxGroupIndicator,\n  //\n  Root,\n  Item,\n  Indicator,\n};\nexport type { CheckboxGroupProps, CheckboxGroupItemProps, CheckboxGroupIndicatorProps };\n"],
  "mappings": "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",
  "names": ["checkbox_group_primitive_exports", "__export", "CheckboxGroup", "CheckboxGroupIndicator", "CheckboxGroupItem", "Indicator", "Item", "Root", "createCheckboxGroupScope", "__toCommonJS", "React", "CheckboxPrimitive", "import_react_checkbox", "import_react_compose_refs", "import_react_context", "import_react_primitive", "RovingFocusGroup", "import_react_roving_focus", "import_react_use_controllable_state", "import_react_direction", "CHECKBOX_GROUP_NAME", "createCheckboxGroupContext", "useRovingFocusGroupScope", "useCheckboxScope", "CheckboxGroupProvider", "useCheckboxGroupContext", "props", "forwardedRef", "__scopeCheckboxGroup", "name", "defaultValue", "valueProp", "required", "disabled", "orientation", "dir", "loop", "onValueChange", "groupProps", "rovingFocusGroupScope", "direction", "value", "setValue", "handleItemCheck", "itemValue", "prevValue", "handleItemUncheck", "ITEM_NAME", "itemProps", "context", "isDisabled", "checkboxScope", "ref", "composedRefs", "checked", "INDICATOR_NAME", "indicatorProps"]
}
