{
  "version": 3,
  "sources": ["../../../src/components/code.tsx"],
  "sourcesContent": ["import * as React from 'react';\nimport classNames from 'classnames';\nimport { Slot } from '@radix-ui/react-slot';\nimport { codePropDefs } from './code.props.js';\nimport { extractProps } from '../helpers/index.js';\nimport { marginPropDefs } from '../props/index.js';\n\nimport type { ComponentPropsWithout, RemovedProps } from '../helpers/index.js';\nimport type { GetPropDefTypes, MarginProps } from '../props/index.js';\n\ntype CodeElement = React.ElementRef<'code'>;\ntype CodeOwnProps = GetPropDefTypes<typeof codePropDefs>;\ninterface CodeProps\n  extends ComponentPropsWithout<'code', RemovedProps>,\n    MarginProps,\n    CodeOwnProps {}\nconst Code = React.forwardRef<CodeElement, CodeProps>((props, forwardedRef) => {\n  const { asChild, className, color, ...codeProps } = extractProps(\n    props,\n    codePropDefs,\n    marginPropDefs\n  );\n  // Code ghost color prop should work as an inherited color by default\n  const resolvedColor = props.variant === 'ghost' ? color || undefined : color;\n  const Comp = asChild ? Slot : 'code';\n  return (\n    <Comp\n      data-accent-color={resolvedColor}\n      {...codeProps}\n      ref={forwardedRef}\n      className={classNames('rt-reset', 'rt-Code', className)}\n    />\n  );\n});\nCode.displayName = 'Code';\n\nexport { Code };\nexport type { CodeProps };\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,UAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAuB,oBACvBC,EAAuB,yBACvBC,EAAqB,gCACrBC,EAA6B,2BAC7BC,EAA6B,+BAC7BC,EAA+B,6BAW/B,MAAMP,EAAOE,EAAM,WAAmC,CAACM,EAAOC,IAAiB,CAC7E,KAAM,CAAE,QAAAC,EAAS,UAAAC,EAAW,MAAAC,EAAO,GAAGC,CAAU,KAAI,gBAClDL,EACA,eACA,gBACF,EAEMM,EAAgBN,EAAM,UAAY,QAAUI,GAAS,OAAYA,EAEvE,OACEV,EAAA,cAFWQ,EAAU,OAAO,OAE3B,CACC,oBAAmBI,EAClB,GAAGD,EACJ,IAAKJ,EACL,aAAW,EAAAM,SAAW,WAAY,UAAWJ,CAAS,EACxD,CAEJ,CAAC,EACDX,EAAK,YAAc",
  "names": ["code_exports", "__export", "Code", "__toCommonJS", "React", "import_classnames", "import_react_slot", "import_code_props", "import_helpers", "import_props", "props", "forwardedRef", "asChild", "className", "color", "codeProps", "resolvedColor", "classNames"]
}
