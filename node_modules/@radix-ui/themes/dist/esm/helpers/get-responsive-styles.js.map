{
  "version": 3,
  "sources": ["../../../src/helpers/get-responsive-styles.ts"],
  "sourcesContent": ["import { breakpoints } from '../props/prop-def.js';\nimport type { Responsive, Union } from '../props/prop-def.js';\nimport { hasOwnProperty } from './has-own-property.js';\nimport { isResponsiveObject } from './is-responsive-object.js';\n\ninterface GetResponsiveStylesOptions {\n  className: string;\n  customProperties: `--${string}`[];\n  value: Responsive<Union> | Responsive<string> | undefined;\n  propValues: string[] | readonly string[];\n  parseValue?: (value: string) => string | undefined;\n}\n\nfunction getResponsiveStyles({ className, customProperties, ...args }: GetResponsiveStylesOptions) {\n  const responsiveClassNames = getResponsiveClassNames({\n    allowArbitraryValues: true,\n    className,\n    ...args,\n  });\n\n  const responsiveCustomProperties = getResponsiveCustomProperties({ customProperties, ...args });\n  return [responsiveClassNames, responsiveCustomProperties] as const;\n}\n\ninterface GetResponsiveClassNamesOptions {\n  allowArbitraryValues?: boolean;\n  className: string;\n  value: Responsive<Union> | Responsive<string> | undefined;\n  propValues: string[] | readonly string[];\n  parseValue?: (value: string) => string | undefined;\n}\n\nfunction getResponsiveClassNames({\n  allowArbitraryValues,\n  value,\n  className,\n  propValues,\n  parseValue = (value) => value,\n}: GetResponsiveClassNamesOptions): string | undefined {\n  const classNames: string[] = [];\n\n  if (!value) {\n    return undefined;\n  }\n\n  if (typeof value === 'string' && propValues.includes(value)) {\n    return getBaseClassName(className, value, parseValue);\n  }\n\n  if (isResponsiveObject(value)) {\n    const object = value;\n\n    for (const bp in object) {\n      // Make sure we are not iterating over keys that aren't breakpoints\n      if (!hasOwnProperty(object, bp) || !breakpoints.includes(bp)) {\n        continue;\n      }\n\n      const value = object[bp];\n\n      if (value !== undefined) {\n        if (propValues.includes(value)) {\n          const baseClassName = getBaseClassName(className, value, parseValue);\n          const bpClassName = bp === 'initial' ? baseClassName : `${bp}:${baseClassName}`;\n          classNames.push(bpClassName);\n        } else if (allowArbitraryValues) {\n          const bpClassName = bp === 'initial' ? className : `${bp}:${className}`;\n          classNames.push(bpClassName);\n        }\n      }\n    }\n\n    return classNames.join(' ');\n  }\n\n  if (allowArbitraryValues) {\n    return className;\n  }\n}\n\nfunction getBaseClassName(\n  className: string,\n  value: string,\n  parseValue: (value: string) => string | undefined\n): string {\n  const delimiter = className ? '-' : '';\n  const matchedValue = parseValue(value);\n  const isNegative = matchedValue?.startsWith('-');\n  const minus = isNegative ? '-' : '';\n  const absoluteValue = isNegative ? matchedValue?.substring(1) : matchedValue;\n  return `${minus}${className}${delimiter}${absoluteValue}`;\n}\n\ninterface GetResponsiveCustomPropertiesOptions {\n  customProperties: `--${string}`[];\n  value: Responsive<Union> | Responsive<string> | undefined;\n  propValues: string[] | readonly string[];\n  parseValue?: (value: string) => string | undefined;\n}\n\nfunction getResponsiveCustomProperties({\n  customProperties,\n  value,\n  propValues,\n  parseValue = (value) => value,\n}: GetResponsiveCustomPropertiesOptions) {\n  let styles: Record<string, string | undefined> = {};\n\n  // Don't generate custom properties if the value is not arbitrary\n  if (!value || (typeof value === 'string' && propValues.includes(value))) {\n    return undefined;\n  }\n\n  if (typeof value === 'string') {\n    styles = Object.fromEntries(customProperties.map((prop) => [prop, value]));\n  }\n\n  if (isResponsiveObject(value)) {\n    const object = value;\n\n    for (const bp in object) {\n      // Make sure we are not iterating over keys that aren't breakpoints\n      if (!hasOwnProperty(object, bp) || !breakpoints.includes(bp)) {\n        continue;\n      }\n\n      const value = object[bp];\n\n      // Don't generate a custom property if the value is not arbitrary\n      if (propValues.includes(value)) {\n        continue;\n      }\n\n      for (const customProperty of customProperties) {\n        const bpProperty = bp === 'initial' ? customProperty : `${customProperty}-${bp}`;\n\n        styles = {\n          [bpProperty]: value,\n          ...styles,\n        };\n      }\n    }\n  }\n\n  for (const key in styles) {\n    const value = styles[key];\n    if (value !== undefined) {\n      styles[key] = parseValue(value);\n    }\n  }\n\n  return styles;\n}\n\nexport { getResponsiveStyles, getResponsiveCustomProperties, getResponsiveClassNames };\n"],
  "mappings": "AAAA,OAAS,eAAAA,MAAmB,uBAE5B,OAAS,kBAAAC,MAAsB,wBAC/B,OAAS,sBAAAC,MAA0B,4BAUnC,SAASC,EAAoB,CAAE,UAAAC,EAAW,iBAAAC,EAAkB,GAAGC,CAAK,EAA+B,CACjG,MAAMC,EAAuBC,EAAwB,CACnD,qBAAsB,GACtB,UAAAJ,EACA,GAAGE,CACL,CAAC,EAEKG,EAA6BC,EAA8B,CAAE,iBAAAL,EAAkB,GAAGC,CAAK,CAAC,EAC9F,MAAO,CAACC,EAAsBE,CAA0B,CAC1D,CAUA,SAASD,EAAwB,CAC/B,qBAAAG,EACA,MAAAC,EACA,UAAAR,EACA,WAAAS,EACA,WAAAC,EAAcF,GAAUA,CAC1B,EAAuD,CACrD,MAAMG,EAAuB,CAAC,EAE9B,GAAKH,EAIL,IAAI,OAAOA,GAAU,UAAYC,EAAW,SAASD,CAAK,EACxD,OAAOI,EAAiBZ,EAAWQ,EAAOE,CAAU,EAGtD,GAAIZ,EAAmBU,CAAK,EAAG,CAC7B,MAAMK,EAASL,EAEf,UAAWM,KAAMD,EAAQ,CAEvB,GAAI,CAAChB,EAAegB,EAAQC,CAAE,GAAK,CAAClB,EAAY,SAASkB,CAAE,EACzD,SAGF,MAAMN,EAAQK,EAAOC,CAAE,EAEvB,GAAIN,IAAU,QACZ,GAAIC,EAAW,SAASD,CAAK,EAAG,CAC9B,MAAMO,EAAgBH,EAAiBZ,EAAWQ,EAAOE,CAAU,EAC7DM,EAAcF,IAAO,UAAYC,EAAgB,GAAGD,CAAE,IAAIC,CAAa,GAC7EJ,EAAW,KAAKK,CAAW,CAC7B,SAAWT,EAAsB,CAC/B,MAAMS,EAAcF,IAAO,UAAYd,EAAY,GAAGc,CAAE,IAAId,CAAS,GACrEW,EAAW,KAAKK,CAAW,CAC7B,EAEJ,CAEA,OAAOL,EAAW,KAAK,GAAG,CAC5B,CAEA,GAAIJ,EACF,OAAOP,EAEX,CAEA,SAASY,EACPZ,EACAQ,EACAE,EACQ,CACR,MAAMO,EAAYjB,EAAY,IAAM,GAC9BkB,EAAeR,EAAWF,CAAK,EAC/BW,EAAaD,GAAc,WAAW,GAAG,EACzCE,EAAQD,EAAa,IAAM,GAC3BE,EAAgBF,EAAaD,GAAc,UAAU,CAAC,EAAIA,EAChE,MAAO,GAAGE,CAAK,GAAGpB,CAAS,GAAGiB,CAAS,GAAGI,CAAa,EACzD,CASA,SAASf,EAA8B,CACrC,iBAAAL,EACA,MAAAO,EACA,WAAAC,EACA,WAAAC,EAAcF,GAAUA,CAC1B,EAAyC,CACvC,IAAIc,EAA6C,CAAC,EAGlD,GAAI,GAACd,GAAU,OAAOA,GAAU,UAAYC,EAAW,SAASD,CAAK,GAQrE,IAJI,OAAOA,GAAU,WACnBc,EAAS,OAAO,YAAYrB,EAAiB,IAAKsB,GAAS,CAACA,EAAMf,CAAK,CAAC,CAAC,GAGvEV,EAAmBU,CAAK,EAAG,CAC7B,MAAMK,EAASL,EAEf,UAAWM,KAAMD,EAAQ,CAEvB,GAAI,CAAChB,EAAegB,EAAQC,CAAE,GAAK,CAAClB,EAAY,SAASkB,CAAE,EACzD,SAGF,MAAMN,EAAQK,EAAOC,CAAE,EAGvB,GAAI,CAAAL,EAAW,SAASD,CAAK,EAI7B,UAAWgB,KAAkBvB,EAG3BqB,EAAS,CACP,CAHiBR,IAAO,UAAYU,EAAiB,GAAGA,CAAc,IAAIV,CAAE,EAGjE,EAAGN,EACd,GAAGc,CACL,CAEJ,CACF,CAEA,UAAWG,KAAOH,EAAQ,CACxB,MAAMd,EAAQc,EAAOG,CAAG,EACpBjB,IAAU,SACZc,EAAOG,CAAG,EAAIf,EAAWF,CAAK,EAElC,CAEA,OAAOc,EACT",
  "names": ["breakpoints", "hasOwnProperty", "isResponsiveObject", "getResponsiveStyles", "className", "customProperties", "args", "responsiveClassNames", "getResponsiveClassNames", "responsiveCustomProperties", "getResponsiveCustomProperties", "allowArbitraryValues", "value", "propValues", "parseValue", "classNames", "getBaseClassName", "object", "bp", "baseClassName", "bpClassName", "delimiter", "matchedValue", "isNegative", "minus", "absoluteValue", "styles", "prop", "customProperty", "key"]
}
