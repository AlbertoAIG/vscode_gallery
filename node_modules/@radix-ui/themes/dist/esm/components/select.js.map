{
  "version": 3,
  "sources": ["../../../src/components/select.tsx"],
  "sourcesContent": ["'use client';\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport * as SelectPrimitive from '@radix-ui/react-select';\nimport * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';\nimport {\n  selectRootPropDefs,\n  selectTriggerPropDefs,\n  selectContentPropDefs,\n} from './select.props.js';\nimport { extractProps } from '../helpers/index.js';\nimport { marginPropDefs } from '../props/index.js';\nimport { Theme, useThemeContext } from './theme.js';\nimport { ThickCheckIcon, ChevronDownIcon } from './icons.js';\n\nimport type { ComponentPropsWithout, RemovedProps } from '../helpers/index.js';\nimport type { GetPropDefTypes, MarginProps } from '../props/index.js';\n\ntype SelectRootOwnProps = GetPropDefTypes<typeof selectRootPropDefs>;\n\ntype SelectContextValue = SelectRootOwnProps;\nconst SelectContext = React.createContext<SelectContextValue>({});\n\ninterface SelectRootProps\n  extends React.ComponentPropsWithoutRef<typeof SelectPrimitive.Root>,\n    SelectContextValue {}\nconst SelectRoot: React.FC<SelectRootProps> = (props) => {\n  const { children, size = selectRootPropDefs.size.default, ...rootProps } = props;\n  return (\n    <SelectPrimitive.Root {...rootProps}>\n      <SelectContext.Provider value={React.useMemo(() => ({ size }), [size])}>\n        {children}\n      </SelectContext.Provider>\n    </SelectPrimitive.Root>\n  );\n};\nSelectRoot.displayName = 'Select.Root';\n\ntype SelectTriggerElement = React.ElementRef<typeof SelectPrimitive.Trigger>;\ntype SelectTriggerOwnProps = GetPropDefTypes<typeof selectTriggerPropDefs>;\ninterface SelectTriggerProps\n  extends ComponentPropsWithout<typeof SelectPrimitive.Trigger, RemovedProps>,\n    MarginProps,\n    SelectTriggerOwnProps {}\nconst SelectTrigger = React.forwardRef<SelectTriggerElement, SelectTriggerProps>(\n  (props, forwardedRef) => {\n    const context = React.useContext(SelectContext);\n    const { children, className, color, radius, placeholder, ...triggerProps } = extractProps(\n      // Pass size value from the context to generate styles\n      { size: context?.size, ...props },\n      // Pass size prop def to allow it to be extracted\n      { size: selectRootPropDefs.size },\n      selectTriggerPropDefs,\n      marginPropDefs\n    );\n    return (\n      <SelectPrimitive.Trigger asChild>\n        <button\n          data-accent-color={color}\n          data-radius={radius}\n          {...triggerProps}\n          ref={forwardedRef}\n          className={classNames('rt-reset', 'rt-SelectTrigger', className)}\n        >\n          <span className=\"rt-SelectTriggerInner\">\n            <SelectPrimitive.Value placeholder={placeholder}>{children}</SelectPrimitive.Value>\n          </span>\n          <SelectPrimitive.Icon asChild>\n            <ChevronDownIcon className=\"rt-SelectIcon\" />\n          </SelectPrimitive.Icon>\n        </button>\n      </SelectPrimitive.Trigger>\n    );\n  }\n);\nSelectTrigger.displayName = 'Select.Trigger';\n\ntype SelectContentElement = React.ElementRef<typeof SelectPrimitive.Content>;\ntype SelectContentOwnProps = GetPropDefTypes<typeof selectContentPropDefs>;\ninterface SelectContentProps\n  extends ComponentPropsWithout<typeof SelectPrimitive.Content, RemovedProps>,\n    SelectContentOwnProps {\n  container?: React.ComponentPropsWithoutRef<typeof SelectPrimitive.Portal>['container'];\n}\nconst SelectContent = React.forwardRef<SelectContentElement, SelectContentProps>(\n  (props, forwardedRef) => {\n    const context = React.useContext(SelectContext);\n    const { className, children, color, container, ...contentProps } = extractProps(\n      // Pass size value from the context to generate styles\n      { size: context?.size, ...props },\n      // Pass size prop def to allow it to be extracted\n      { size: selectRootPropDefs.size },\n      selectContentPropDefs\n    );\n    const themeContext = useThemeContext();\n    const resolvedColor = color || themeContext.accentColor;\n    return (\n      <SelectPrimitive.Portal container={container}>\n        <Theme asChild>\n          <SelectPrimitive.Content\n            data-accent-color={resolvedColor}\n            sideOffset={4}\n            {...contentProps}\n            asChild={false}\n            ref={forwardedRef}\n            className={classNames(\n              { 'rt-PopperContent': contentProps.position === 'popper' },\n              'rt-SelectContent',\n              className\n            )}\n          >\n            <ScrollAreaPrimitive.Root type=\"auto\" className=\"rt-ScrollAreaRoot\">\n              <SelectPrimitive.Viewport asChild className=\"rt-SelectViewport\">\n                <ScrollAreaPrimitive.Viewport\n                  className=\"rt-ScrollAreaViewport\"\n                  style={{ overflowY: undefined }}\n                >\n                  {children}\n                </ScrollAreaPrimitive.Viewport>\n              </SelectPrimitive.Viewport>\n              <ScrollAreaPrimitive.Scrollbar\n                className=\"rt-ScrollAreaScrollbar rt-r-size-1\"\n                orientation=\"vertical\"\n              >\n                <ScrollAreaPrimitive.Thumb className=\"rt-ScrollAreaThumb\" />\n              </ScrollAreaPrimitive.Scrollbar>\n            </ScrollAreaPrimitive.Root>\n          </SelectPrimitive.Content>\n        </Theme>\n      </SelectPrimitive.Portal>\n    );\n  }\n);\nSelectContent.displayName = 'Select.Content';\n\ntype SelectItemElement = React.ElementRef<typeof SelectPrimitive.Item>;\ninterface SelectItemProps\n  extends ComponentPropsWithout<typeof SelectPrimitive.Item, RemovedProps> {}\nconst SelectItem = React.forwardRef<SelectItemElement, SelectItemProps>((props, forwardedRef) => {\n  const { className, children, ...itemProps } = props;\n  return (\n    <SelectPrimitive.Item\n      {...itemProps}\n      asChild={false}\n      ref={forwardedRef}\n      className={classNames('rt-SelectItem', className)}\n    >\n      <SelectPrimitive.ItemIndicator className=\"rt-SelectItemIndicator\">\n        <ThickCheckIcon className=\"rt-SelectItemIndicatorIcon\" />\n      </SelectPrimitive.ItemIndicator>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  );\n});\nSelectItem.displayName = 'Select.Item';\n\ntype SelectGroupElement = React.ElementRef<typeof SelectPrimitive.Group>;\ninterface SelectGroupProps\n  extends ComponentPropsWithout<typeof SelectPrimitive.Group, RemovedProps> {}\nconst SelectGroup = React.forwardRef<SelectGroupElement, SelectGroupProps>(\n  ({ className, ...props }, forwardedRef) => (\n    <SelectPrimitive.Group\n      {...props}\n      asChild={false}\n      ref={forwardedRef}\n      className={classNames('rt-SelectGroup', className)}\n    />\n  )\n);\nSelectGroup.displayName = 'Select.Group';\n\ntype SelectLabelElement = React.ElementRef<typeof SelectPrimitive.Label>;\ninterface SelectLabelProps\n  extends ComponentPropsWithout<typeof SelectPrimitive.Label, RemovedProps> {}\nconst SelectLabel = React.forwardRef<SelectLabelElement, SelectLabelProps>(\n  ({ className, ...props }, forwardedRef) => (\n    <SelectPrimitive.Label\n      {...props}\n      asChild={false}\n      ref={forwardedRef}\n      className={classNames('rt-SelectLabel', className)}\n    />\n  )\n);\nSelectLabel.displayName = 'Select.Label';\n\ntype SelectSeparatorElement = React.ElementRef<typeof SelectPrimitive.Separator>;\ninterface SelectSeparatorProps\n  extends ComponentPropsWithout<typeof SelectPrimitive.Separator, RemovedProps> {}\nconst SelectSeparator = React.forwardRef<SelectSeparatorElement, SelectSeparatorProps>(\n  ({ className, ...props }, forwardedRef) => (\n    <SelectPrimitive.Separator\n      {...props}\n      asChild={false}\n      ref={forwardedRef}\n      className={classNames('rt-SelectSeparator', className)}\n    />\n  )\n);\nSelectSeparator.displayName = 'Select.Separator';\n\nexport {\n  SelectRoot as Root,\n  SelectTrigger as Trigger,\n  SelectContent as Content,\n  SelectItem as Item,\n  SelectGroup as Group,\n  SelectLabel as Label,\n  SelectSeparator as Separator,\n};\n\nexport type {\n  SelectRootProps as RootProps,\n  SelectTriggerProps as TriggerProps,\n  SelectContentProps as ContentProps,\n  SelectItemProps as ItemProps,\n  SelectGroupProps as GroupProps,\n  SelectLabelProps as LabelProps,\n  SelectSeparatorProps as SeparatorProps,\n};\n"],
  "mappings": "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",
  "names": ["React", "classNames", "SelectPrimitive", "ScrollAreaPrimitive", "selectRootPropDefs", "selectTriggerPropDefs", "selectContentPropDefs", "extractProps", "marginPropDefs", "Theme", "useThemeContext", "ThickCheckIcon", "ChevronDownIcon", "SelectContext", "SelectRoot", "props", "children", "size", "rootProps", "SelectTrigger", "forwardedRef", "context", "className", "color", "radius", "placeholder", "triggerProps", "SelectContent", "container", "contentProps", "themeContext", "resolvedColor", "SelectItem", "itemProps", "SelectGroup", "SelectLabel", "SelectSeparator"]
}
