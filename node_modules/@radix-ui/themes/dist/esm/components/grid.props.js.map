{
  "version": 3,
  "sources": ["../../../src/components/grid.props.ts"],
  "sourcesContent": ["import { asChildPropDef, gapPropDefs } from '../props/index.js';\nimport type { GetPropDefTypes, PropDef } from '../props/index.js';\n\nconst as = ['div', 'span'] as const;\nconst displayValues = ['none', 'inline-grid', 'grid'] as const;\nconst columnsValues = ['1', '2', '3', '4', '5', '6', '7', '8', '9'] as const;\nconst rowsValues = ['1', '2', '3', '4', '5', '6', '7', '8', '9'] as const;\nconst flowValues = ['row', 'column', 'dense', 'row-dense', 'column-dense'] as const;\nconst alignValues = ['start', 'center', 'end', 'baseline', 'stretch'] as const;\nconst justifyValues = ['start', 'center', 'end', 'between'] as const;\n\nconst gridPropDefs = {\n  /**\n   * Controls whether to render **div** or **span**\n   *\n   * @example\n   * as=\"div\"\n   * as=\"span\"\n   */\n  as: { type: 'enum', values: as, default: 'div' },\n  ...asChildPropDef,\n  /**\n   * Sets the CSS **display** property.\n   * Supports a subset of the corresponding CSS values and responsive objects.\n   *\n   * @example\n   * display=\"inline-grid\"\n   * display={{ sm: 'none', lg: 'grid' }}\n   *\n   * @link\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/display\n   */\n  display: {\n    type: 'enum',\n    className: 'rt-r-display',\n    values: displayValues,\n    responsive: true,\n  },\n  /**\n   * Sets the CSS **grid-template-columns** property.\n   * Supports numeric string values, CSS strings and responsive objects.\n   *\n   * Use numeric string values to create grid columns of even size.\n   *\n   * @example\n   * columns=\"3\"\n   * columns=\"100px 1fr\"\n   * columns={{ xs: '1', md: 'auto 1fr' }}\n   *\n   * @link\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns\n   */\n  columns: {\n    type: 'enum | string',\n    className: 'rt-r-gtc',\n    customProperties: ['--grid-template-columns'],\n    values: columnsValues,\n    parseValue: parseGridValue,\n    responsive: true,\n  },\n  /**\n   * Sets the CSS **grid-template-rows** property.\n   * Supports numeric string values, CSS strings and responsive objects.\n   *\n   * Use numeric string values to create grid rows of even size.\n   *\n   * @example\n   * rows=\"3\"\n   * rows=\"100px 1fr\"\n   * rows={{ xs: '1', md: 'auto 1fr' }}\n   *\n   * @link\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-rows\n   */\n  rows: {\n    type: 'enum | string',\n    className: 'rt-r-gtr',\n    customProperties: ['--grid-template-rows'],\n    values: rowsValues,\n    parseValue: parseGridValue,\n    responsive: true,\n  },\n  /**\n   * Sets the CSS **grid-auto-flow** property.\n   * Supports the corresponding CSS values and responsive objects.\n   *\n   * @example\n   * flow=\"column\"\n   * flow={{ sm: 'column', lg: 'row' }}\n   *\n   * @link\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow\n   */\n  flow: {\n    type: 'enum',\n    className: 'rt-r-gaf',\n    values: flowValues,\n    responsive: true,\n  },\n  /**\n   * Sets the CSS **align-items** property.\n   * Supports the corresponding CSS values and responsive objects.\n   *\n   * @example\n   * align=\"center\"\n   * align={{ sm: 'baseline', lg: 'center' }}\n   *\n   * @link\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/align-items\n   */\n  align: {\n    type: 'enum',\n    className: 'rt-r-ai',\n    values: alignValues,\n    responsive: true,\n  },\n  /**\n   * Sets the CSS **justify-content** property.\n   * Supports a subset of the corresponding CSS values and responsive objects.\n   *\n   * @example\n   * justify=\"between\"\n   * justify={{ sm: 'start', lg: 'center' }}\n   *\n   * @link\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content\n   */\n  justify: {\n    type: 'enum',\n    className: 'rt-r-jc',\n    values: justifyValues,\n    parseValue: parseJustifyValue,\n    responsive: true,\n  },\n  ...gapPropDefs,\n} satisfies {\n  as: PropDef<(typeof as)[number]>;\n  display: PropDef<(typeof displayValues)[number]>;\n  columns: PropDef<(typeof columnsValues)[number]>;\n  rows: PropDef<(typeof rowsValues)[number]>;\n  flow: PropDef<(typeof flowValues)[number]>;\n  align: PropDef<(typeof alignValues)[number]>;\n  justify: PropDef<(typeof justifyValues)[number]>;\n};\n\nfunction parseGridValue(value: string): string {\n  if ((gridPropDefs.columns.values as readonly string[]).includes(value)) {\n    return value;\n  }\n\n  return value?.match(/^\\d+$/) ? `repeat(${value}, minmax(0, 1fr))` : value;\n}\n\nfunction parseJustifyValue(value: string) {\n  return value === 'between' ? 'space-between' : value;\n}\n\n// Use all of the imported prop defs to ensure that JSDoc works\ntype GridOwnProps = GetPropDefTypes<typeof gridPropDefs & typeof asChildPropDef>;\n\nexport { gridPropDefs };\nexport type { GridOwnProps };\n"],
  "mappings": "AAAA,OAAS,kBAAAA,EAAgB,eAAAC,MAAmB,oBAG5C,MAAMC,EAAK,CAAC,MAAO,MAAM,EACnBC,EAAgB,CAAC,OAAQ,cAAe,MAAM,EAC9CC,EAAgB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EAC5DC,EAAa,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EACzDC,EAAa,CAAC,MAAO,SAAU,QAAS,YAAa,cAAc,EACnEC,EAAc,CAAC,QAAS,SAAU,MAAO,WAAY,SAAS,EAC9DC,EAAgB,CAAC,QAAS,SAAU,MAAO,SAAS,EAEpDC,EAAe,CAQnB,GAAI,CAAE,KAAM,OAAQ,OAAQP,EAAI,QAAS,KAAM,EAC/C,GAAGF,EAYH,QAAS,CACP,KAAM,OACN,UAAW,eACX,OAAQG,EACR,WAAY,EACd,EAeA,QAAS,CACP,KAAM,gBACN,UAAW,WACX,iBAAkB,CAAC,yBAAyB,EAC5C,OAAQC,EACR,WAAYM,EACZ,WAAY,EACd,EAeA,KAAM,CACJ,KAAM,gBACN,UAAW,WACX,iBAAkB,CAAC,sBAAsB,EACzC,OAAQL,EACR,WAAYK,EACZ,WAAY,EACd,EAYA,KAAM,CACJ,KAAM,OACN,UAAW,WACX,OAAQJ,EACR,WAAY,EACd,EAYA,MAAO,CACL,KAAM,OACN,UAAW,UACX,OAAQC,EACR,WAAY,EACd,EAYA,QAAS,CACP,KAAM,OACN,UAAW,UACX,OAAQC,EACR,WAAYG,EACZ,WAAY,EACd,EACA,GAAGV,CACL,EAUA,SAASS,EAAeE,EAAuB,CAC7C,OAAKH,EAAa,QAAQ,OAA6B,SAASG,CAAK,EAC5DA,EAGFA,GAAO,MAAM,OAAO,EAAI,UAAUA,CAAK,oBAAsBA,CACtE,CAEA,SAASD,EAAkBC,EAAe,CACxC,OAAOA,IAAU,UAAY,gBAAkBA,CACjD",
  "names": ["asChildPropDef", "gapPropDefs", "as", "displayValues", "columnsValues", "rowsValues", "flowValues", "alignValues", "justifyValues", "gridPropDefs", "parseGridValue", "parseJustifyValue", "value"]
}
