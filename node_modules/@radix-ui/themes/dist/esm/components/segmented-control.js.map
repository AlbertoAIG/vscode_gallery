{
  "version": 3,
  "sources": ["../../../src/components/segmented-control.tsx"],
  "sourcesContent": ["'use client';\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport * as ToggleGroupPrimitive from '@radix-ui/react-toggle-group';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { segmentedControlRootPropDefs } from './segmented-control.props.js';\nimport { extractProps } from '../helpers/index.js';\nimport { marginPropDefs } from '../props/index.js';\n\nimport type { ComponentPropsWithout, RemovedProps } from '../helpers/index.js';\nimport type { GetPropDefTypes, MarginProps } from '../props/index.js';\n\ntype SegmentedControlRootOwnProps = GetPropDefTypes<typeof segmentedControlRootPropDefs>;\n\ninterface SegmentedControlRootProps\n  extends ComponentPropsWithout<'div', RemovedProps | 'dir'>,\n    SegmentedControlRootOwnProps,\n    MarginProps {\n  value?: string;\n  defaultValue?: string;\n  onValueChange?(value: string): void;\n}\n\nconst SegmentedControlRoot = React.forwardRef<HTMLDivElement, SegmentedControlRootProps>(\n  (props, forwardedRef) => {\n    const {\n      className,\n      children,\n      radius,\n      value: valueProp,\n      defaultValue: defaultValueProp,\n      onValueChange: onValueChangeProp,\n      ...rootProps\n    } = extractProps(props, segmentedControlRootPropDefs, marginPropDefs);\n\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      onChange: onValueChangeProp,\n      defaultProp: defaultValueProp,\n    });\n\n    return (\n      <ToggleGroupPrimitive.Root\n        data-radius={radius}\n        ref={forwardedRef}\n        className={classNames('rt-SegmentedControlRoot', className)}\n        onValueChange={(value) => {\n          if (value) {\n            setValue(value);\n          }\n        }}\n        {...rootProps}\n        type=\"single\"\n        value={value}\n        asChild={false}\n        disabled={false}\n      >\n        {children}\n        <div className=\"rt-SegmentedControlIndicator\" />\n      </ToggleGroupPrimitive.Root>\n    );\n  }\n);\n\nSegmentedControlRoot.displayName = 'SegmentedControl.Root';\n\ninterface SegmentedControlItemOwnProps {\n  value: string;\n}\n\ninterface SegmentedControlItemProps\n  extends ComponentPropsWithout<\n      typeof ToggleGroupPrimitive.Item,\n      RemovedProps | 'disabled' | 'type' | 'value'\n    >,\n    SegmentedControlItemOwnProps {}\n\nconst SegmentedControlItem = React.forwardRef<HTMLButtonElement, SegmentedControlItemProps>(\n  ({ children, className, ...props }, forwardedRef) => (\n    <ToggleGroupPrimitive.Item\n      ref={forwardedRef}\n      className={classNames('rt-reset', 'rt-SegmentedControlItem', className)}\n      {...props}\n      disabled={false}\n      asChild={false}\n    >\n      <span className=\"rt-SegmentedControlItemSeparator\" />\n      <span className=\"rt-SegmentedControlItemLabel\">\n        <span className=\"rt-SegmentedControlItemLabelActive\">{children}</span>\n        <span className=\"rt-SegmentedControlItemLabelInactive\">{children}</span>\n      </span>\n    </ToggleGroupPrimitive.Item>\n  )\n);\n\nSegmentedControlItem.displayName = 'SegmentedControl.Item';\n\nexport { SegmentedControlRoot as Root, SegmentedControlItem as Item };\nexport type { SegmentedControlRootProps as RootProps, SegmentedControlItemProps as ItemProps };\n"],
  "mappings": "aAEA,UAAYA,MAAW,QACvB,OAAOC,MAAgB,aACvB,UAAYC,MAA0B,+BACtC,OAAS,wBAAAC,MAA4B,yCACrC,OAAS,gCAAAC,MAAoC,+BAC7C,OAAS,gBAAAC,MAAoB,sBAC7B,OAAS,kBAAAC,MAAsB,oBAgB/B,MAAMC,EAAuBP,EAAM,WACjC,CAACQ,EAAOC,IAAiB,CACvB,KAAM,CACJ,UAAAC,EACA,SAAAC,EACA,OAAAC,EACA,MAAOC,EACP,aAAcC,EACd,cAAeC,EACf,GAAGC,CACL,EAAIX,EAAaG,EAAOJ,EAA8BE,CAAc,EAE9D,CAACW,EAAOC,CAAQ,EAAIf,EAAqB,CAC7C,KAAMU,EACN,SAAUE,EACV,YAAaD,CACf,CAAC,EAED,OACEd,EAAA,cAACE,EAAqB,KAArB,CACC,cAAaU,EACb,IAAKH,EACL,UAAWR,EAAW,0BAA2BS,CAAS,EAC1D,cAAgBO,GAAU,CACpBA,GACFC,EAASD,CAAK,CAElB,EACC,GAAGD,EACJ,KAAK,SACL,MAAOC,EACP,QAAS,GACT,SAAU,IAETN,EACDX,EAAA,cAAC,OAAI,UAAU,+BAA+B,CAChD,CAEJ,CACF,EAEAO,EAAqB,YAAc,wBAanC,MAAMY,EAAuBnB,EAAM,WACjC,CAAC,CAAE,SAAAW,EAAU,UAAAD,EAAW,GAAGF,CAAM,EAAGC,IAClCT,EAAA,cAACE,EAAqB,KAArB,CACC,IAAKO,EACL,UAAWR,EAAW,WAAY,0BAA2BS,CAAS,EACrE,GAAGF,EACJ,SAAU,GACV,QAAS,IAETR,EAAA,cAAC,QAAK,UAAU,mCAAmC,EACnDA,EAAA,cAAC,QAAK,UAAU,gCACdA,EAAA,cAAC,QAAK,UAAU,sCAAsCW,CAAS,EAC/DX,EAAA,cAAC,QAAK,UAAU,wCAAwCW,CAAS,CACnE,CACF,CAEJ,EAEAQ,EAAqB,YAAc",
  "names": ["React", "classNames", "ToggleGroupPrimitive", "useControllableState", "segmentedControlRootPropDefs", "extractProps", "marginPropDefs", "SegmentedControlRoot", "props", "forwardedRef", "className", "children", "radius", "valueProp", "defaultValueProp", "onValueChangeProp", "rootProps", "value", "setValue", "SegmentedControlItem"]
}
